---------------------------------------------
// File ../types/index.ts
// src/types/index.ts
export type Product = {
  id: number;
  code: string;
  name: string;
  price: number | string;
};

// End of file ../types/index.ts

---------------------------------------------
// File ../components/ProductList.css
.product-container {
  display: flex;
  gap: 2rem;
  flex-wrap: wrap;
}

.product-section,
.cart-section {
  flex: 1;
  min-width: 300px;
  background-color: var(--card-background);
  border-radius: var(--border-radius);
  padding: 1.5rem;
  box-shadow: var(--box-shadow);
}

.section-title {
  font-size: 1.5rem;
  margin-bottom: 1.5rem;
  color: var(--primary-color);
  border-bottom: 2px solid var(--primary-color);
  padding-bottom: 0.5rem;
}

.product-list {
  list-style: none;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1rem;
}

.product-item {
  background-color: white;
  border-radius: var(--border-radius);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  padding: 1rem;
  display: flex;
  flex-direction: column;
  transition:
    transform var(--transition-speed),
    box-shadow var(--transition-speed);
  border: 1px solid #eee;
}

.product-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.product-info {
  flex: 1;
  margin-bottom: 0.75rem;
}

.product-name {
  font-weight: 600;
  margin-bottom: 0.25rem;
}

.product-code {
  color: #666;
  font-size: 0.8rem;
}

.product-price {
  font-weight: 600;
  color: var(--primary-color);
  margin: 0.5rem 0;
  font-size: 1.1rem;
}

.cart-list {
  list-style: none;
}

.cart-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 0;
  border-bottom: 1px solid #eee;
}

.cart-item-info {
  flex: 1;
}

.cart-item-name {
  font-weight: 500;
}

.cart-item-details {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-top: 0.25rem;
}

.cart-item-code {
  color: #666;
  font-size: 0.8rem;
}

.cart-item-quantity {
  background-color: var(--primary-color);
  color: white;
  border-radius: 50%;
  width: 1.5rem;
  height: 1.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.8rem;
}

.cart-item-price {
  font-weight: 600;
}

.discount {
  color: var(--success-color);
  font-weight: 500;
}

.cart-actions {
  display: flex;
  gap: 0.5rem;
}

.cart-summary {
  margin-top: 1.5rem;
  padding-top: 1.5rem;
  border-top: 2px solid #eee;
}

.cart-total {
  font-size: 1.2rem;
  font-weight: 600;
  color: var(--primary-color);
  margin-bottom: 1rem;
}

.cart-buttons {
  display: flex;
  gap: 1rem;
  margin-top: 1rem;
}

.btn {
  cursor: pointer;
  border: none;
  border-radius: var(--border-radius);
  padding: 0.75rem 1.5rem;
  font-weight: 500;
  transition: background-color var(--transition-speed);
}

.btn-primary {
  background-color: var(--primary-color);
  color: white;
}

.btn-primary:hover {
  background-color: #2970d6;
}

.btn-secondary {
  background-color: var(--secondary-color);
  color: white;
}

.btn-secondary:hover {
  background-color: #7029d6;
}

.btn-danger {
  background-color: var(--danger-color);
  color: white;
}

.btn-danger:hover {
  background-color: #d6295b;
}

.btn-success {
  background-color: var(--success-color);
  color: white;
}

.btn-success:hover {
  background-color: #2d9000;
}

.btn-sm {
  padding: 0.25rem 0.5rem;
  font-size: 0.8rem;
}

.empty-cart {
  text-align: center;
  color: #666;
  padding: 2rem 0;
}

.icon {
  margin-right: 0.5rem;
  vertical-align: middle;
}

.icon-sm {
  margin-right: 0.25rem;
  vertical-align: middle;
  font-size: 0.9em;
}

.btn .icon-sm {
  margin-right: 0.25rem;
}
// End of file ../components/ProductList.css

---------------------------------------------
// File ../App.css
:root {
  --primary-color: #3a86ff;
  --secondary-color: #8338ec;
  --success-color: #38b000;
  --warning-color: #ffbe0b;
  --danger-color: #ff006e;
  --background-color: #f8f9fa;
  --card-background: white;
  --text-color: #212529;
  --border-radius: 8px;
  --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  --transition-speed: 0.3s;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  background-color: var(--background-color);
  color: var(--text-color);
  font-family:
    'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans',
    'Helvetica Neue', sans-serif;
}

.app-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.app-header {
  background: linear-gradient(
    135deg,
    var(--primary-color),
    var(--secondary-color)
  );
  color: white;
  padding: 1.5rem;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.app-header h1 {
  margin: 0;
  font-size: 2rem;
  font-weight: 600;
}

.app-main {
  flex: 1;
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
  width: 100%;
}

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
// End of file ../App.css

---------------------------------------------
// File pricingEngine.test.ts
import { applyPricingRules } from './pricingEngine';
import type { Product } from '../types';

const products: Record<string, Product> = {
  GR1: { id: 1, code: 'GR1', name: 'Green Tea', price: 3.11 },
  SR1: { id: 2, code: 'SR1', name: 'Strawberries', price: 5.00 },
  CF1: { id: 3, code: 'CF1', name: 'Coffee', price: 11.23 },
};

const scan = (basket: string[]): number => {
  const grouped: Record<string, number> = {};
  basket.forEach((code) => {
    grouped[code] = (grouped[code] || 0) + 1;
  });

  return basket.reduce((sum, code) => {
    if (!grouped[code]) return sum;
    const subtotal = applyPricingRules(products[code], grouped[code]);
    grouped[code] = 0; // avoid re-counting
    return sum + subtotal;
  }, 0);
};

describe('Checkout pricing rules', () => {
  it('GR1,GR1 → 3.11€', () => {
    expect(scan(['GR1', 'GR1']).toFixed(2)).toBe('3.11');
  });

  it('SR1,SR1,GR1,SR1 → 16.61€', () => {
    expect(scan(['SR1', 'SR1', 'GR1', 'SR1']).toFixed(2)).toBe('16.61');
  });

  it('GR1,CF1,SR1,CF1,CF1 → 30.57€', () => {
    expect(scan(['GR1', 'CF1', 'SR1', 'CF1', 'CF1']).toFixed(2)).toBe('30.57');
  });
});

// End of file pricingEngine.test.ts

---------------------------------------------
// File pricingEngine.ts
// src/utils/pricingEngine.ts
import type { Product } from '../types';

export function applyPricingRules(product: Product, quantity: number): number {
  const price = Number(product.price);

  switch (product.code) {
    case 'GR1': {
      const payable = Math.ceil(quantity / 2);
      return price * payable;
    }
    case 'SR1': {
      const unitPrice = quantity >= 3 ? 4.5 : price;
      return unitPrice * quantity;
    }
    case 'CF1': {
      const discountPrice = quantity >= 3 ? price * (2 / 3) : price;
      return discountPrice * quantity;
    }
    default:
      return price * quantity;
  }
}

export function calculateDiscount(product: Product, quantity: number): number {
  const original = Number(product.price) * quantity;
  const discounted = applyPricingRules(product, quantity);
  return original - discounted;
}

// End of file pricingEngine.ts

---------------------------------------------
// File ../../../cart_app/config/routes.rb
Rails.application.routes.draw do
  resources :products, only: [:index]
end
// End of file ../../../cart_app/config/routes.rb

